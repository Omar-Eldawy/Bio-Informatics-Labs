mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- DATA CLEANING ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subdf[subdf$CHR %in% 1:22, ]
subdf <- subdf[subdf$P > 0 & subdf$P <= 1, ]
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d valid SNPs", met, nrow(subdf)))
next
}
# --- PLOTTING ---
png(
filename = file.path(out_dir, paste0("Manhattan_", met, ".png")),
width = 1200, height = 600
)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg)
)
dev.off()
}
# 5. Combined faceted Manhattan plot
# Add -log10(P) for ggplot
df$negLogP <- -log10(df$P)
# Clean combined data similarly
df_comb <- df[complete.cases(df[, c("CHR","BP","negLogP")]) &
df$CHR %in% 1:22 &
df$P > 0 & df$P <= 1, ]
p <- ggplot(df_comb, aes(x = BP, y = negLogP, color = factor(CHR))) +
geom_point(alpha = 0.6, size = 0.7) +
facet_wrap(~ Metabolite, ncol = 4, scales = "free_x") +
geom_hline(yintercept = -log10(threshold_gw), linetype = "dashed") +
geom_hline(yintercept = -log10(threshold_sugg), linetype = "dotted") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
labs(
x = "Genomic Position (bp)",
y = expression(-log[10](P)),
color = "Chromosome",
title = "Combined Manhattan Plots for All Metabolites"
) +
theme_bw(base_size = 12) +
theme(
strip.text   = element_text(size = 10),
panel.spacing = unit(0.5, "lines"),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()
)
ggsave(
filename = file.path(out_dir, "Manhattan_all_metabolites.png"),
plot     = p,
width    = 16,
height   = 12,
dpi      = 300
)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
# df <- read_excel(input_file, sheet = sheet_name)
# Rename & coerce columns
df$SNP        <- df$variant.id
df$CHR        <- as.numeric(df$chr)
df$BP         <- as.numeric(df$pos)
# 3. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 4. Per‑metabolite Manhattan plots (20 files)
threshold_gw   <- 1e-4
mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- DATA CLEANING ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subdf[subdf$CHR %in% 1:22, ]
subdf <- subdf[subdf$P > 0 & subdf$P <= 1, ]
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d valid SNPs", met, nrow(subdf)))
next
}
# --- PLOTTING ---
png(
filename = file.path(out_dir, paste0("Manhattan_", met, ".png")),
width = 1200, height = 600
)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg)
)
dev.off()
}
# 5. Combined faceted Manhattan plot
# Add -log10(P) for ggplot
df$negLogP <- -log10(df$P)
# Clean combined data similarly
df_comb <- df[complete.cases(df[, c("CHR","BP","negLogP")]) &
df$CHR %in% 1:22 &
df$P > 0 & df$P <= 1, ]
p <- ggplot(df_comb, aes(x = BP, y = negLogP, color = factor(CHR))) +
geom_point(alpha = 0.6, size = 0.7) +
facet_wrap(~ Metabolite, ncol = 4, scales = "free_x") +
geom_hline(yintercept = -log10(threshold_gw), linetype = "dashed") +
geom_hline(yintercept = -log10(threshold_sugg), linetype = "dotted") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
labs(
x = "Genomic Position (bp)",
y = expression(-log[10](P)),
color = "Chromosome",
title = "Combined Manhattan Plots for All Metabolites"
) +
theme_bw(base_size = 12) +
theme(
strip.text   = element_text(size = 10),
panel.spacing = unit(0.5, "lines"),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()
)
ggsave(
filename = file.path(out_dir, "Manhattan_all_metabolites.png"),
plot     = p,
width    = 16,
height   = 12,
dpi      = 300
)
library(readxl)
library(qqman)
library(ggplot2)
# 1. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
#df <- read_excel(input_file, sheet = 1)
# Rename & coerce columns
colnames(df)[colnames(df)=="variant.id"] <- "SNP"
colnames(df)[colnames(df)=="Score.pval"] <- "P"
colnames(df)[colnames(df)=="metabolite"] <- "Metabolite"
df$CHR        <- as.numeric(df$chr)
df$BP         <- as.numeric(df$pos)
df$Metabolite <- as.factor(df$Metabolite)
# 2. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 3. Set thresholds
threshold_gw   <- 1e-4    # genome-wide line
threshold_sugg <- 1e-5    # suggestive line (or adjust as desired)
# 4. Loop over each metabolite, save one PNG per plot
mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- Data cleaning ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subset(subdf, CHR %in% 1:22 & P > 0 & P <= 1)
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d SNPs", met, nrow(subdf)))
next
}
# --- Plot with qqman ---
# Opens its own PNG device and closes it
png(filename = file.path(out_dir, paste0("Manhattan_", met, ".png")),
width = 1200, height = 600)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg),
highlight      = subdf$SNP[subdf$P <= threshold_gw],  # highlight hits
col            = c("grey30", "grey60")
)
dev.off()
}
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
# df <- read_excel(input_file, sheet = sheet_name)
# Rename & coerce columns
df$SNP        <- df$variant.id
df$CHR        <- as.numeric(df$chr)
df$BP         <- as.numeric(df$pos)
# 3. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 4. Per‑metabolite Manhattan plots using qqman package (20 files)
threshold_gw   <- 1e-4
mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- DATA CLEANING ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subdf[subdf$CHR %in% 1:22, ]
subdf <- subdf[subdf$P > 0 & subdf$P <= 1, ]
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d valid SNPs", met, nrow(subdf)))
next
}
# --- PLOTTING ---
png(
filename = file.path(out_dir, paste0("Manhattan_", met, ".png")),
width = 1200, height = 600
)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg)
)
dev.off()
}
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
df <- read_excel(input_file, sheet = sheet_name)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
# df <- read_excel(input_file, sheet = sheet_name)
# Rename & coerce columns
df$SNP        <- df$variant.id
df$CHR        <- as.numeric(df$chr)
df$BP         <- as.numeric(df$pos)
# 3. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 4. Per‑metabolite Manhattan plots using qqman package (20 files)
threshold_gw   <- 1e-4
mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- DATA CLEANING ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subdf[subdf$CHR %in% 1:22, ]
subdf <- subdf[subdf$P > 0 & subdf$P <= 1, ]
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d valid SNPs", met, nrow(subdf)))
next
}
# --- PLOTTING ---
png(
filename = file.path(out_dir, paste0("Manhattan_", met, ".png")),
width = 1200, height = 600
)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg)
)
dev.off()
}
View(df)
View(df_comb)
View(map_df)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
# Read the Excel file - handle with care for large file
# If this fails with memory issues, consider using readxl with specific columns:
# df <- read_excel(input_file, sheet = sheet_name,
#                 col_types = c("text", "text", "numeric", "numeric", "numeric"))
tryCatch({
df <- read_excel(input_file, sheet = sheet_name)
}, error = function(e) {
cat("Error reading file:", e$message, "\n")
cat("Attempting to continue with existing data frame if available\n")
})
# Make sure all required columns exist and are properly formatted
# Check if data frame exists and has the required columns
if (exists("df") && !is.null(df)) {
# Rename columns if necessary
if ("variant.id" %in% colnames(df)) colnames(df)[colnames(df) == "variant.id"] <- "SNP"
if ("Score.pval" %in% colnames(df)) colnames(df)[colnames(df) == "Score.pval"] <- "P"
if ("metabolite" %in% colnames(df)) colnames(df)[colnames(df) == "metabolite"] <- "Metabolite"
# Ensure proper data types
if ("chr" %in% colnames(df)) df$CHR <- as.numeric(as.character(df$chr))
if ("pos" %in% colnames(df)) df$BP <- as.numeric(as.character(df$pos))
# Make Metabolite a factor if it exists
if ("Metabolite" %in% colnames(df)) df$Metabolite <- as.factor(df$Metabolite)
} else {
stop("Data frame 'df' is not available or properly structured")
}
# 3. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 4. Per‑metabolite Manhattan plots using qqman package
threshold_gw   <- 1e-4
threshold_sugg <- 1e-5  # Adjusted threshold for suggestive line
# Check that we have the necessary columns
required_cols <- c("CHR", "BP", "P", "SNP", "Metabolite")
missing_cols <- required_cols[!required_cols %in% colnames(df)]
if (length(missing_cols) > 0) {
stop(paste("Missing required columns:", paste(missing_cols, collapse=", ")))
}
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
df <- read_excel(input_file, sheet = sheet_name)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
#df <- read_excel(input_file, sheet = sheet_name)
# Rename & coerce columns
df$SNP        <- df$variant.id
df$CHR        <- as.numeric(df$chr)
df$BP         <- as.numeric(df$pos)
# 3. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 4. Per‑metabolite Manhattan plots (20 files)
threshold_gw   <- 1e-4
mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- DATA CLEANING ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subdf[subdf$CHR %in% 1:22, ]
subdf <- subdf[subdf$P > 0 & subdf$P <= 1, ]
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d valid SNPs", met, nrow(subdf)))
next
}
# --- PLOTTING ---
png(
filename = file.path(outdir, paste0("Manhattan", met, ".png")),
width = 1200, height = 600
)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg)
)
dev.off()
}
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
# df <- read_excel(input_file, sheet = sheet_name)
# Rename & coerce columns
df$SNP        <- df$variant.id
df$CHR        <- as.numeric(df$chr)
df$BP         <- as.numeric(df$pos)
# 3. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 4. Per‑metabolite Manhattan plots (20 files)
threshold_gw   <- 1e-4
mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- DATA CLEANING ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subdf[subdf$CHR %in% 1:22, ]
subdf <- subdf[subdf$P > 0 & subdf$P <= 1, ]
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d valid SNPs", met, nrow(subdf)))
next
}
# --- PLOTTING ---
png(
filename = file.path(outdir, paste0("Manhattan", met, ".png")),
width = 1200, height = 600
)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg)
)
dev.off()
}
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
# df <- read_excel(input_file, sheet = sheet_name)
# Rename & coerce columns
df$SNP        <- df$variant.id
df$CHR        <- as.numeric(df$chr)
df$BP         <- as.numeric(df$pos)
# 3. Create output directory
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# 4. Per‑metabolite Manhattan plots (20 files)
threshold_gw   <- 1e-4
mets <- levels(df$Metabolite)
for (met in mets) {
subdf <- subset(df, Metabolite == met)
# --- DATA CLEANING ---
subdf <- subdf[complete.cases(subdf[, c("CHR","BP","P")]), ]
subdf <- subdf[subdf$CHR %in% 1:22, ]
subdf <- subdf[subdf$P > 0 & subdf$P <= 1, ]
if (nrow(subdf) < 10) {
warning(sprintf("Skipping %s: only %d valid SNPs", met, nrow(subdf)))
next
}
# --- PLOTTING ---
png(
filename = file.path(outdir, paste0("Manhattan", met, ".png")),
width = 1200, height = 600
)
manhattan(
subdf,
chr            = "CHR",
bp             = "BP",
snp            = "SNP",
p              = "P",
main           = paste("Manhattan Plot —", met),
genomewideline = -log10(threshold_gw),
suggestiveline = -log10(threshold_sugg)
)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
df <- read_excel(input_file, sheet = sheet_name)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
#df <- read_excel(input_file, sheet = sheet_name)
# Rename & coerce columns
df$SNP        <- df$variant.id
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
df <- read_excel(input_file, sheet = sheet_name)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
df <- read_excel(input_file, sheet = sheet_name)
gc()
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
df <- read_excel(input_file, sheet = sheet_name)
library(readxl)
library(qqman)
library(ggplot2)
# 2. Read & prepare data
input_file <- "Dataset/All_results.xlsx"
sheet_name <- 1
df <- read_excel(input_file, sheet = sheet_name)
