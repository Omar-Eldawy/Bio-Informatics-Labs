knitr::opts_chunk$set(echo = TRUE)
dataset <- read.csv("BrainCancerMin.csv")
str(dataset)
dataset <- read.csv("BrainCancerMin.csv")
nrow(dataset)
ncol(dataset)
colnames(dataset)
str(dataset)
dataset <- read.csv("BrainCancerMin.csv")
print("-Number of rows = " + nrow(dataset))
dataset <- read.csv("BrainCancerMin.csv")
print(paste("-Number of rows =", nrow(dataset)))
print(paste("-Number of columns =", ncol(dataset)))
print(paste("-Column names are ", colnames(dataset)))
dataset <- read.csv("BrainCancerMin.csv")
print(paste("-Number of rows =", nrow(dataset)))
print(paste("-Number of columns =", ncol(dataset)))
print("-Column names are {")
print(colnames(dataset))
print("}")
dataset <- read.csv("BrainCancerMin.csv")
print(paste("-Number of rows =", nrow(dataset)))
print(paste("-Number of columns =", ncol(dataset)))
print("-Column names are")
print(colnames(dataset))
# install.packages('nycflights13')
library(nycflights13)
dataset <- nycflights13::flights
names(dataset)
head(dataset)
tail(dataset)
nrow(dataset)
ncol(dataset)
filter(dataset, month == 10, day == 14)
View(dataset)
filter(dataset, month == 10, day == 14)
filter(dataset, month == 10 | day == 14) # any combination of logical operations
arrange(dataset, air_time, distance, flight)
sorted_data <- arrange(dataset, desc(air_time), distance, desc(carrier))
dataset <- read.csv("BrainCancerMin.csv")
print(paste("-Number of rows =", nrow(dataset)))
print(paste("-Number of columns =", ncol(dataset)))
print("-Column names are")
print(colnames(dataset))
View(dataset)
filtered_dataset <- dataset %>% select(samples, type, 3:5, 147:150)
#install.packages('tidyverse')
library(tidyverse)
library(dplyr)
dataset <- read.csv("BrainCancerMin.csv")
print(paste("-Number of rows =", nrow(dataset)))
print(paste("-Number of columns =", ncol(dataset)))
print("-Column names are")
print(colnames(dataset))
filtered_dataset <- dataset %>% select(samples, type, 3:5, 147:150)
View(filtered_dataset)
type_count <- table(filtered_dataset$type)
?table
?table()
the_most_occurring_type_of_cancer <- names(which.max(type_count))
print(paste("The most occurring type of cancer is:", the_most_occurring_type_of_cancer))
library(ggplot2)
cancer_dataframe <- as.data.frame(type_count)
View(cancer_dataframe)
View(cancer_dataframe)
colnames(cancer_dataframe) <- c("Type", "Count")
View(cancer_dataframe)
ggplot(cancer_datafram, aes(x = reorder(Type, -Count), y = Count, fill = Type)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Set2") +  # Use different colors for each type
labs(title = "Cancer Type Distribution",
x = "Cancer Type",
y = "Frequency") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend if unnecessary
ggplot(cancer_dataframe, aes(x = reorder(Type, -Count), y = Count, fill = Type)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Set2") +  # Use different colors for each type
labs(title = "Cancer Type Distribution",
x = "Cancer Type",
y = "Frequency") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend if unnecessary
print(paste("-The number of NA in dataset is", sum(is.na(dataset))))
subset_dataset <- dataset %>% select(samples, type, 3:5, 147:150)
type_count <- table(subset_dataset$type)
the_most_occurring_type_of_cancer <- names(which.max(type_count))
print(paste("The most occurring type of cancer is:", the_most_occurring_type_of_cancer))
library(ggplot2)
cancer_dataframe <- as.data.frame(type_count)
colnames(cancer_dataframe) <- c("Type", "Count")
ggplot(cancer_dataframe, aes(x = reorder(Type, -Count), y = Count, fill = Type)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Set2") +  # Use different colors for each type
labs(title = "Cancer Type Distribution",
x = "Cancer Type",
y = "Frequency") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend if unnecessary
print(paste("-The number of NA in dataset is", sum(is.na(dataset))))
filtered_dataset <- dataset %>% filter(X1007_s_at > 12)
print(paste("-The number of rows before filtering is", nrow(dataset)))
print(paste("-The number of rows after filtering is", nrows(filtered_dataset)))
print(paste("-The number of NA in dataset is", sum(is.na(dataset))))
filtered_dataset <- dataset %>% filter(X1007_s_at > 12)
print(paste("-The number of rows before filtering is", nrow(dataset)))
print(paste("-The number of rows after filtering is", nrow(filtered_dataset)))
View(filtered_dataset)
?summarise()
genes_summary <- dataset %>%
summarise(across(everything(), list(mean = mean , sd = sd)))
genes_summary <- dataset %>%
summarise(across(everything(), list(mean = mean , sd = sd), na.rm = TRUE))
genes_summary <- dataset %>%
summarise(across(
everything(),
list(mean = \(x) mean(x, na.rm = TRUE),
sd = \(x) sd(x, na.rm = TRUE))))
genes_summary <- dataset %>%
select(! 1:2 ) %>%
summarise(across(
everything(),
list(mean = \(x) mean(x, na.rm = TRUE),
sd = \(x) sd(x, na.rm = TRUE))))
View(genes_summary)
mean_summary <- summarise(across(where(is.numeric),
mean = \(x) mean(x, na.rm = TRUE)))
mean_summary <- summarise(dataset, across(where(is.numeric),
mean = \(x) mean(x, na.rm = TRUE)))
rlang::last_trace()
mean_summary <- summarise(dataset, across(where(is.numeric),
\(x) mean(x, na.rm = TRUE)))
sd_summary <- summarise(dataset, across(where(is.numeric),
\(x) sd(x, na.rm = TRUE)))
gene_summary <- bind_rows(mean_summary, sd_summary) %>%
mutate(Summary = c("Mean", "SD")) %>%
select(Summary, everything())
View(gene_summary)
View(dataset)
genes <- dataset %>% select(!(1:2))
mean_summary <- summarise(genes, across(where(is.numeric),
\(x) mean(x, na.rm = TRUE)))
sd_summary <- summarise(genes, across(where(is.numeric),
\(x) sd(x, na.rm = TRUE)))
gene_summary <- bind_rows(mean_summary, sd_summary) %>%
mutate(Summary = c("mean", "sd")) %>%
select(Summary, everything())
View(gene_summary)
save_to_csv <- function(ds, path) {
write.csv(ds, path, row.names = TRUE)
}
save_to_csv(gene_summary, "gene_summary")
?grepl()
save_to_csv <- function(ds, path) {
if(!gprepl(path, ".csv")){
path <- paste0(path, ".csv")
}
write.csv(ds, path, row.names = TRUE)
}
save_to_csv(gene_summary, "gene_summary")
save_to_csv <- function(ds, path) {
if(!grepl(path, ".csv")){
path <- paste0(path, ".csv")
}
write.csv(ds, path, row.names = TRUE)
}
save_to_csv(gene_summary, "gene_summary")
save_to_csv <- function(ds, path) {
if(!endwith(path, ".csv")){
path <- paste0(path, ".csv")
}
write.csv(ds, path, row.names = TRUE)
}
save_to_csv(gene_summary, "gene_summary")
save_to_csv <- function(ds, path) {
if(!endswith(path, ".csv")){
path <- paste0(path, ".csv")
}
write.csv(ds, path, row.names = TRUE)
}
save_to_csv(gene_summary, "gene_summary")
save_to_csv <- function(ds, path) {
if(!endsWith(path, ".csv")){
path <- paste0(path, ".csv")
}
write.csv(ds, path, row.names = TRUE)
}
save_to_csv(gene_summary, "gene_summary")
save_to_csv <- function(ds, path) {
if(!endsWith(path, ".csv")){
path <- paste0(path, ".csv")
}
write.csv(ds, path, row.names = TRUE)
}
save_to_csv(gene_summary, "gene_summary.csv")
